import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import FuncFormatter
# # total
# # Your time values
# total_time = [2193.18, 3491.25, 4928.6, 6338.1, 8079.02, 9541.83, 10976.67, 12443.84, 14146.25, 15185.33]
# total_gas = [5665073.12, 8380333.44, 11095413.92, 13808301.72, 16521267.64, 19236162.16, 21949323.28, 24664394.52, 27379486.04, 30094048.29]
# # # Create x values with intervals of 10 from 0 to 110
# x_values = np.arange(10, 101, 10)
#
# # Create a plot with improved aesthetics
# plt.figure(figsize=(10, 6), dpi=300)  # Set the figure size and DPI
# plt.plot(x_values, total_time, marker='o', linestyle='-', color='b', label='total_time')
# plt.title('total_time Plot', fontsize=16)  # Set title and font size
# plt.xlabel('AccountNumber', fontsize=12)  # Set x-axis label and font size
# plt.ylabel('Time', fontsize=12)  # Set y-axis label and font size
# plt.xticks(x_values)  # Set x-axis ticks
# plt.grid(True, linestyle='--', alpha=0.7)  # Add grid lines
#
# # Customize the legend
# plt.legend(loc='best')
#
# # Save the plot as an image file (e.g., PNG)
# plt.savefig('total_time.png')
#
# # Show the plot (optional)
# plt.show()
#
# #
# # Create a plot with improved aesthetics
# plt.figure(figsize=(10, 6), dpi=300)  # Set the figure size and DPI
# plt.plot(x_values, total_gas, marker='o', linestyle='-', color='b', label='total_gas')
# plt.title('total_gas Plot', fontsize=16)  # Set title and font size
# plt.xlabel('AccountNumber', fontsize=12)  # Set x-axis label and font size
# plt.ylabel('Gas', fontsize=12)  # Set y-axis label and font size
# plt.xticks(x_values)  # Set x-axis ticks
# plt.grid(True, linestyle='--', alpha=0.7)  # Add grid lines
#
# # Customize the legend
# plt.legend(loc='best')
#
# # Save the plot as an image file (e.g., PNG)
# plt.savefig('total_gas.png')
#
# # Show the plot (optional)
# plt.show()

# pie time

# # 数据
# # 10
# data = [136.9807692, 351.0480769, 127.0576923, 527.0769231, 17.08653846, 824.25, 25.11538462, 160.5096154, 23.5]
# # 20
# data = [132.039604, 669.2376238, 212.8118812, 975.039604, 21.89108911, 1183.772277, 18.44554455, 260.5841584, 17.01980198]
# # 30
# data = [131.1089109, 1012.336634, 303.4851485, 1452.277228, 17.61386139, 1563.217822, 18.08910891, 392.0594059, 15.93069307]
# # 40
# data = [133, 1353.069307, 400.8415842, 1923.732673, 15.91089109, 1947.009901, 18.71287129, 530.5346535, 16.66336634]
# # 50
# data = [131.2673267, 1699.108911, 490.2871287, 2387.811881, 15.17821782, 2592.049505, 20.42574257, 724.7623762, 16.2970297]
# # 60
# data = [133.8910891, 2062.772277, 583.9009901, 2798.217822, 14.71287129, 3090.237624, 18.37623762, 823.8910891, 15.51485149]
# # 70
# data = [128.5445545, 2388.514851, 667.8712871, 3174.079208, 15.97029703, 3533.227723, 17.84158416, 965.1485149, 14.82178218]
# # 80
# data = [133.4752475, 2773.138614, 770.6633663, 3580.089109, 15, 4013.841584, 17.93069307, 1123.455446, 15.27722772]
# # 90
# data = [135.7821782, 3099.019802, 846.990099, 4227.643564, 18.22772277, 4509.871287, 17.28712871, 1261.792079, 15.16831683]
# # 100
# data = [129.9009901, 3321.792079, 918.3564356, 4505.792079, 15.74257426, 4888.891089, 17.59405941, 1357.207921, 14.68316832]
# labels = ['time_deploy', 'time_bid', 'time_claimWinner', 'time_genProofs', 'time_revealBid', 'time_verifyWinnerBid', 'time_winnerPay', 'time_withdraw', 'time_destroy']
# colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6', '#c2f0c2', '#6666ff', '#c2f0f0']
# explode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)
# fig, ax = plt.subplots(figsize=(24, 14))
# # 为标签添加百分比信息
# label_with_percentage = [f'{label} ({data[i]/sum(data)*100:.1f}%)' for i, label in enumerate(labels)]
# # 创建饼图
# pie, _ = ax.pie(data, startangle=140, colors=colors, explode=explode, shadow=True, textprops={'fontsize': 24})
# ax.axis('equal')
# # 设置中文字体
# plt.rcParams['font.sans-serif'] = ['SimHei']
# ax.set_title('100账户各项时间占比', fontsize=28, loc='center', pad=20)
# # 创建包含百分比信息的图例
# # legend = plt.legend(label_with_percentage, title="gas消耗项", loc='upper left', bbox_to_anchor=(0.81, 0.8), fontsize=24)
# # legend.get_title().set_fontsize(28)
# # 为每个饼块添加标签和引导线
# for i, p in enumerate(pie):
#     # 找到标签的位置
#     here = (p.theta2 - p.theta1) / 2.0 + p.theta1
#     labely = np.sin(here / 180 * np.pi)
#     labelx = np.cos(here / 180 * np.pi)
#     # 设置连接方式
#     connect = f"angle,angleA=0,angleB={here}"
#     # 设置文本对齐方式
#     align = {-1: "right", 1: "left"}[int(np.sign(labelx))]
#     # 绘制标签和引导线，并将引导线置于饼图上方
#     ax.annotate(
#         label_with_percentage[i],  # 标签文本
#         xy=(labelx, labely),  # 标签位置
#         xytext=((1.0 + i * 0.04) * np.sign(labelx), (1.1 + i * 0.05) * labely),  # 引导线终点位置
#         fontsize=24,  # 字体大小
#         horizontalalignment=align,  # 水平对齐方式
#         weight='bold',  # 文本加粗
#         arrowprops=dict(arrowstyle="-", connectionstyle=connect),  # 引导线样式
#         zorder=1,  # 将引导线置于饼图上方
#         va="center"  # 垂直对齐方式
#     )
#
# # plt.subplots_adjust(left=-0.2)
# plt.savefig('pie_time_100.png')
# # plt.show()


# pie gas

# # 数据
# # 10
# data = [2975801, 2114041.962, 83501, 53513, 0, 41406.23077, 38434, 324848, 33527]
# # 20
# data = [2975801, 4423244.792, 83501, 53513, 0, 41404.57426, 38434, 730908, 33527]
# # 30
# data = [2975801, 6732264.673, 83499.93069, 53513, 0, 41406.35644, 38434, 1136968, 33527]
# # 40
# data = [2975801, 9041283.01, 83500.40594, 53513, 0, 41406.23762, 38434, 1543028, 31336]
# # 50
# data = [2975801, 11350299.92, 83499.57426, 53513, 0, 41405.64356, 36324, 1949088, 31336]
# # 60
# data = [2975801, 13659324.2, 83500.52475, 53322, 0, 41406, 36324, 2355148, 31336]
# # 70
# data = [2975801, 15968344.08, 83500.40594, 51403, 0, 41406.35644, 36324, 2761208, 31336]
# # 80
# data = [2975801, 18277356.24, 83499.93069, 51403, 0, 41405.76238, 36324, 3167268, 31336]
# # 90
# data = [2975801, 20586387.17, 83499.93069, 51403, 0, 41406, 36324, 3573328, 31336]
# # 100
# data = [2975801, 22895405.5, 83499.69307, 50894.05941, 0, 41405.88119, 36324, 3979388, 31336]
#
#
#
# labels = ['gas_deploy', 'gas_bid', 'gas_claimWinner', 'gas_genProofs', 'gas_revealBid', 'gas_verifyWinnerBid', 'gas_winnerPay', 'gas_withdraw', 'gas_destroy']
# colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6', '#c2f0c2', '#6666ff', '#c2f0f0']
# explode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)
#
# fig, ax = plt.subplots(figsize=(24, 14))
#
# # 为标签添加百分比信息
# label_with_percentage = [f'{label} ({data[i]/sum(data)*100:.1f}%)' for i, label in enumerate(labels)]
#
# # 创建饼图
# pie, _ = ax.pie(data, startangle=140, colors=colors, explode=explode, shadow=True, textprops={'fontsize': 24})
# ax.axis('equal')
#
# # 设置中文字体
# plt.rcParams['font.sans-serif'] = ['SimHei']
# ax.set_title('100账户各项gas占比', fontsize=28)
#
# # 创建包含百分比信息的图例
# # legend = plt.legend(label_with_percentage, title="gas消耗项", loc='upper left', bbox_to_anchor=(0.81, 0.8), fontsize=24)
# # legend.get_title().set_fontsize(28)
#
# # 为每个饼块添加标签和引导线
# for i, p in enumerate(pie):
#     # 找到标签的位置
#     here = (p.theta2 - p.theta1) / 2.0 + p.theta1
#     labely = np.sin(here / 180 * np.pi)
#     labelx = np.cos(here / 180 * np.pi)
#
#     # 设置连接方式
#     connect = f"angle,angleA=0,angleB={here}"
#
#     # 设置文本对齐方式
#     align = {-1: "right", 1: "left"}[int(np.sign(labelx))]
#
#     # 绘制标签和引导线，并将引导线置于饼图上方
#     ax.annotate(
#         label_with_percentage[i],  # 标签文本
#         xy=(labelx, labely),  # 标签位置
#         xytext=((1.1 + i * 0.05) * np.sign(labelx), (1.1 - i * 0.1) * labely),  # 引导线终点位置
#         fontsize=24,  # 字体大小
#         horizontalalignment=align,  # 水平对齐方式
#         weight='bold',  # 文本加粗
#         arrowprops=dict(arrowstyle="-", connectionstyle=connect),  # 引导线样式
#         zorder=1,  # 将引导线置于饼图上方
#         va="center"  # 垂直对齐方式
#     )
#
# # plt.subplots_adjust(left=-0.2)
# plt.savefig('pie_gas_100.png')
# plt.show()


# # # 柱状 time
# #
# # # 输入数据
# # 10
# data = [
#     2317, 2486, 2247, 2214, 2364, 2094, 2160, 2319, 2724, 2172,
#     2302, 2110, 2180, 2177, 2131, 2257, 2265, 2240, 2189, 2050,
#     2101, 2174, 2293, 2161, 2141, 2002, 2272, 2111, 2222, 2139,
#     2142, 2213, 2120, 2058, 2183, 2100, 2203, 2239, 2239, 2123,
#     2079, 2077, 2188, 2087, 2074, 2116, 2059, 2147, 2143, 2254,
#     2271, 2108, 2153, 2090, 2241, 2209, 2448, 2262, 2217, 2377,
#     2117, 2171, 2155, 2249, 2153, 2095, 2178, 2176, 2054, 2250,
#     2154, 2192, 2213, 2202, 2146, 2200, 2106, 2313, 2167, 2214,
#     2115, 2108, 2181, 2103, 2174, 2267, 2284, 2211, 2137, 2178,
#     2233, 2245, 2139, 2403, 2154, 2158, 2118, 2190, 2410, 2171,
# ]
# # 20
# data =[
#     4381, 4424, 4508, 3885, 3833, 3594, 4138, 3700, 3746, 3566,
#     3613, 3639, 3705, 3667, 3630, 3547, 3777, 3682, 3072, 3559,
#     3149, 3448, 3530, 3546, 3434, 3558, 3598, 3417, 3444, 3403,
#     3386, 3499, 3446, 3353, 3434, 3433, 3415, 3314, 3480, 3467,
#     3336, 3316, 3320, 3667, 3330, 3352, 3551, 3565, 3400, 3327,
#     3503, 3390, 3323, 3419, 3415, 3465, 3379, 3543, 3353, 3382,
#     3350, 3413, 3501, 3302, 3417, 3391, 3424, 3373, 3455, 3718,
#     3371, 3402, 3418, 3550, 3525, 3291, 3414, 3384, 3490, 3394,
#     3322, 3369, 3320, 3446, 3344, 3401, 3310, 3337, 3497, 3509,
#     3361, 3507, 3390, 3440, 3306, 3307, 3267, 3390, 3504, 3459,
# ]
# # 30
# data =[
#     6621, 5489, 5376, 6019, 5780, 5421, 5220, 5123, 5129, 5130,
#     5118, 4926, 4893, 5010, 4804, 4915, 4758, 4820, 4804, 4722,
#     4719, 4747, 4764, 4737, 5041, 5132, 5052, 5038, 4862, 5036,
#     4820, 4770, 4854, 5071, 4872, 4711, 4833, 4864, 4760, 4943,
#     4856, 5074, 4748, 4899, 4922, 4843, 4855, 4957, 4893, 4878,
#     4939, 4850, 4820, 4969, 4786, 5077, 4899, 4820, 5120, 4849,
#     4822, 4858, 4815, 4726, 4808, 4924, 4824, 4845, 4630, 4777,
#     4822, 4724, 4773, 4775, 4828, 4862, 4854, 4881, 4805, 4796,
#     4886, 4833, 4914, 4816, 4788, 4681, 4831, 4782, 4793, 4757,
#     4721, 4853, 4787, 4837, 5035, 5038, 4904, 4818, 4838, 5041
# ]
# # 40
# data =[
#     7542, 7624, 6811, 7014, 6740, 7044, 6621, 6285, 6333, 6338,
#     6253, 6344, 6226, 6274, 6252, 6255, 6232, 6321, 6094, 6237,
#     6283, 6339, 6219, 6272, 6280, 6230, 6221, 6176, 6268, 6114,
#     6507, 6172, 6190, 6410, 6287, 6402, 6131, 6238, 6207, 6152,
#     6200, 6236, 6491, 6131, 6167, 6092, 6159, 6198, 6182, 6518,
#     6283, 6097, 6218, 6284, 6245, 6275, 6478, 6209, 6170, 6250,
#     6582, 6470, 6266, 6373, 6158, 6299, 6123, 6159, 6299, 6362,
#     6188, 6175, 6367, 6261, 6281, 6259, 6444, 6639, 6337, 6438,
#     6385, 6374, 6235, 6295, 6410, 6359, 6366, 6256, 6273, 6445,
#     6233, 6424, 6283, 6487, 6220, 6227, 6305, 6154, 6576, 6202,
# ]
# # 50
# data =[
#     9321, 9451, 8754, 8751, 8391, 8520, 8273, 8176, 7942, 8061,
#     7956, 8109, 7960, 8156, 8046, 8012, 7772, 7968, 7941, 7836,
#     7938, 7916, 7940, 7904, 7939, 7806, 8192, 8009, 7899, 7927,
#     7830, 7901, 7859, 7897, 8113, 7987, 7607, 8015, 8056, 8042,
#     7874, 7872, 7877, 7780, 7880, 7826, 7534, 7875, 7917, 7912,
#     7773, 7827, 7903, 7872, 7851, 7930, 7920, 8508, 8716, 8714,
#     8475, 8199, 8228, 8027, 8217, 7991, 8180, 7876, 8017, 7934,
#     8059, 8109, 8238, 7946, 8383, 7935, 8100, 8075, 8730, 8078,
#     7950, 8319, 8102, 8122, 8224, 8032, 8234, 7901, 8015, 8073,
#     8141, 8030, 8181, 7984, 8060, 8323, 8013, 7966, 7945, 7956
# ]
# # 60
# data =[
#     11200, 11105, 10280, 9907, 9800, 9438, 9373, 9391, 9441, 9345,
#     9366, 9420, 9220, 9498, 9502, 9480, 9514, 9205, 9356, 9281,
#     9389, 9421, 9538, 9424, 9403, 9299, 9227, 9556, 9484, 9334,
#     9450, 9281, 9298, 9314, 9204, 9411, 9318, 9333, 9378, 9409,
#     9591, 9518, 9712, 9467, 9443, 9456, 9531, 9555, 9483, 9622,
#     9424, 9524, 9749, 9298, 9315, 9437, 9389, 9479, 9600, 9439,
#     9356, 9509, 9589, 9476, 9636, 9431, 9478, 9396, 9494, 9590,
#     9570, 9718, 9579, 9636, 9667, 9515, 9752, 9492, 9704, 9564,
#     9658, 9505, 9585, 9728, 9581, 9683, 9787, 9437, 9820, 9460,
#     9596, 9621, 9625, 10003, 9450, 9460, 9492, 9603, 9723, 9589,
# ]
# # 70
# data =[
#     12487, 12111, 12339, 12380, 12180, 12523, 13141, 11813, 11783, 11255,
#     11046, 11020, 11000, 11012, 10967, 10927, 10851, 10925, 11050, 10809,
#     10649, 10734, 11184, 10958, 10742, 10777, 10652, 11053, 10668, 10483,
#     10713, 10765, 10981, 10668, 10730, 10749, 10668, 10717, 10892, 10845,
#     10999, 11022, 10721, 10880, 10846, 11009, 10873, 10777, 10648, 10958,
#     10700, 10599, 10738, 10611, 10548, 10690, 10621, 10895, 10636, 10880,
#     11086, 11026, 10812, 10900, 10838, 10971, 11072, 10881, 10759, 10808,
#     10869, 10932, 10722, 10765, 10789, 10886, 10799, 10816, 10625, 10851,
#     11043, 10809, 10824, 10997, 10860, 10796, 10730, 10852, 11117, 10781,
#     10932, 11026, 10699, 10922, 10832, 10784, 10936, 10796, 10806, 11020,
# ]
# # 80
# data =[
#     14522, 13674, 13788, 13487, 12470, 12426, 12381, 12162, 12165, 12113,
#     12555, 12408, 12726, 12464, 12299, 12403, 12334, 12012, 12230, 12578,
#     13327, 12569, 12089, 12233, 12282, 12388, 12181, 12190, 12377, 12208,
#     12311, 12238, 12266, 12357, 12180, 12152, 11992, 12180, 12169, 12312,
#     12341, 12462, 12231, 12159, 12210, 12343, 12465, 12129, 12312, 12379,
#     12277, 12304, 12240, 12368, 12099, 12160, 12379, 12473, 12439, 12635,
#     12271, 12221, 12547, 12734, 12612, 12372, 12573, 12541, 12549, 12415,
#     12253, 12460, 12473, 12355, 12353, 12331, 12419, 12530, 12635, 12315,
#     12430, 12348, 12387, 12452, 12739, 12399, 12366, 12361, 12622, 12593,
#     12263, 12591, 12578, 12445, 12668, 12676, 12610, 12371, 12526, 12397,
# ]
# # 90
# data =[
#     15512, 15638, 14960, 15248, 15062, 15173, 14946, 15929, 15847, 15533,
#     15156, 15291, 15347, 15641, 14874, 14618, 14723, 14736, 14340, 14601,
#     14365, 14259, 14256, 14302, 14617, 14182, 14646, 14358, 14074, 14875,
#     15124, 15406, 15224, 14410, 15422, 15011, 14974, 14768, 15465, 15046,
#     14616, 13984, 14419, 14146, 14454, 14302, 14362, 14050, 14102, 14088,
#     14448, 15339, 15404, 15164, 14965, 14788, 15200, 15091, 15171, 15743,
#     15847, 14959, 15834, 14878, 14180, 13925, 12892, 12935, 13222, 13086,
#     12545, 12623, 12493, 12828, 12661, 12552, 12716, 13096, 12650, 13701,
#     12966, 12995, 12633, 12539, 12644, 12823, 12830, 12692, 12714, 12881,
#     12576, 12570, 12722, 12376, 12550, 12581, 12789, 12273, 12523, 12530,
# ]
# # 100
# data =[
#     18426, 17707, 18955, 17914, 17869, 20148, 19379, 17039, 16648, 16488,
#     16502, 16796, 16397, 16488, 17047, 16773, 18741, 18570, 18466, 19213,
#     18420, 18624, 19178, 18588, 19526, 18764, 18454, 18899, 18703, 19149,
#     18955, 15453, 14529, 13819, 13743, 13855, 13748, 13656, 13549, 13709,
#     13663, 14018, 13788, 13432, 13557, 13528, 14011, 13646, 13576, 13554,
#     13764, 13895, 13770, 13676, 13610, 13629, 13799, 13700, 13653, 13744,
#     13989, 14230, 13644, 13718, 13773, 14042, 13808, 14084, 14034, 13900,
#     13933, 13744, 13817, 14050, 13823, 13673, 13847, 13674, 13615, 13771,
#     13997, 13691, 13560, 14030, 13736, 13970, 13847, 13994, 13939, 14045,
#     13902, 14044, 15276, 13926, 13599, 13826, 13840, 13583, 13914, 13745,
# ]
#
# # 计算平均值和标准差
# mean_value = np.mean(data)
# std_deviation = np.std(data)
#
# # 创建柱状图
# plt.figure(figsize=(16, 8), dpi=600)
# plt.bar(range(len(data)), data, color='skyblue')
#
# # 添加平均线
# plt.axhline(mean_value, color='red', linestyle='--', label=f'平均值: {mean_value:.2f}')
#
# # 旋转x轴标签
# plt.xticks(range(len(data)), [str(i+1) for i in range(len(data))], rotation=90)
#
# # 增加数据标签
# for i, v in enumerate(data):
#     plt.text(i, v, str(v), ha='center', va='bottom', rotation=90, fontsize=8)
#
# # 标题包括标准差信息
# plt.title(f'30账户100次time消耗柱状图(ms) (标准差: {std_deviation:.2f})', fontsize=16)
#
# # 添加标签
# plt.xlabel('数据点', fontsize=14)
# plt.ylabel('数值', fontsize=14)
#
# # 显示柱状图
# plt.rcParams['font.sans-serif'] = ['SimHei']
# plt.legend(loc='upper right')  # 将图例放在右上角
# plt.tight_layout()
# plt.savefig('zhu_time_30.png')
# # plt.show()


# # 柱状 gas
# #
# # # 输入数据
# # 10
# data = [
#     5665067, 5665079, 5665031, 5665067, 5665091, 5665079, 5665067, 5665067, 5665103, 5665091,
#     5665055, 5665055, 5665067, 5665115, 5665091, 5665091, 5665067, 5665031, 5665055, 5665079,
#     5665067, 5665055, 5665067, 5665115, 5665091, 5665067, 5665055, 5665055, 5665055, 5665067,
#     5665091, 5665043, 5665067, 5665091, 5665067, 5665091, 5665103, 5665127, 5665103, 5665055,
#     5665043, 5665067, 5665091, 5665067, 5665067, 5665055, 5665103, 5665091, 5665067, 5665079,
#     5665019, 5665055, 5665103, 5665079, 5665067, 5665067, 5665079, 5665055, 5665091, 5665091,
#     5665055, 5665055, 5665055, 5665067, 5665067, 5665067, 5665079, 5665079, 5665067, 5665043,
#     5665103, 5665079, 5665091, 5665043, 5665043, 5665091, 5665043, 5665079, 5665115, 5665079,
#     5665091, 5665103, 5665091, 5665079, 5665007, 5665079, 5665067, 5665079, 5665079, 5665079,
#     5665079, 5664995, 5665103, 5665079, 5665067, 5665067, 5665079, 5665079, 5665091, 5665103,
# ]
# # 20
# data = [
#     8380302, 8380350, 8380374, 8380314, 8380314, 8380338, 8380350, 8380326, 8380290, 8380338,
#     8380350, 8380350, 8380386, 8380314, 8380290, 8380302, 8380362, 8380374, 8380326, 8380314,
#     8380326, 8380338, 8380326, 8380362, 8380374, 8380338, 8380290, 8380326, 8380302, 8380314,
#     8380374, 8380254, 8380338, 8380422, 8380314, 8380362, 8380314, 8380278, 8380314, 8380374,
#     8380314, 8380326, 8380374, 8380350, 8380326, 8380350, 8380350, 8380338, 8380302, 8380350,
#     8380362, 8380374, 8380350, 8380326, 8380314, 8380350, 8380338, 8380362, 8380314, 8380338,
#     8380350, 8380326, 8380326, 8380374, 8380326, 8380314, 8380338, 8380314, 8380350, 8380338,
#     8380350, 8380362, 8380290, 8380314, 8380362, 8380290, 8380350, 8380386, 8380338, 8380302,
#     8380290, 8380338, 8380326, 8380314, 8380266, 8380302, 8380326, 8380290, 8380302, 8380362,
#     8380314, 8380362, 8380362, 8380326, 8380338, 8380338, 8380362, 8380350, 8380326, 8380338,
# ]
# # 30
# data =[
#     11095430, 11095406, 11095490, 11095382, 11095394, 11095358, 11095430, 11095466, 11095382, 11095442,
#     11095406, 11095454, 11095454, 11095454, 11095430, 11095418, 11095418, 11095406, 11095442, 11095382,
#     11095454, 11095394, 11095394, 11095466, 11095394, 11095358, 11095454, 11095478, 11095430, 11095430,
#     11095382, 11095370, 11095454, 11095430, 11095418, 11095370, 11095346, 11095394, 11095382, 11095418,
#     11095430, 11095430, 11095442, 11095406, 11095406, 11095442, 11095406, 11095430, 11095382, 11095382,
#     11095454, 11095370, 11095466, 11095478, 11095478, 11095406, 11095358, 11095442, 11095466, 11095418,
#     11095394, 11095430, 11095466, 11095394, 11095406, 11095466, 11095454, 11095382, 11095382, 11095442,
#     11095442, 11095442, 11095406, 11095358, 11095358, 11095382, 11095418, 11095406, 11095406, 11095430,
#     11095418, 11095442, 11095346, 11095466, 11095370, 11095394, 11095358, 11095394, 11095406, 11095382,
#     11095430, 11095430, 11095394, 11095418, 11095382, 11095430, 11095346, 11095418, 11095382, 11095370
# ]
# # 40
# data =[
#     13808271, 13808295, 13808319, 13808307, 13808283, 13808355, 13808283, 13808331, 13808307, 13808319,
#     13808247, 13808307, 13808283, 13808247, 13808331, 13808331, 13808319, 13808295, 13808319, 13808319,
#     13808271, 13808211, 13808247, 13808271, 13808271, 13808331, 13808235, 13808271, 13808271, 13808271,
#     13808295, 13808319, 13808331, 13808355, 13808271, 13808343, 13808247, 13808271, 13808379, 13808295,
#     13808331, 13808331, 13808319, 13808247, 13808307, 13808319, 13808343, 13808283, 13808307, 13808367,
#     13808199, 13808379, 13808319, 13808307, 13808307, 13808343, 13808259, 13808307, 13808271, 13808271,
#     13808379, 13808307, 13808295, 13808283, 13808283, 13808295, 13808283, 13808271, 13808295, 13808271,
#     13808343, 13808331, 13808343, 13808355, 13808307, 13808307, 13808319, 13808379, 13808331, 13808331,
#     13808247, 13808295, 13808331, 13808319, 13808295, 13808283, 13808259, 13808319, 13808307, 13808175,
#     13808379, 13808307, 13808283, 13808283, 13808319, 13808295, 13808295, 13808307, 13808307, 13808319,
# ]
# # 50
# data =[
#     16521253, 16521253, 16521301, 16521205, 16521253, 16521265, 16521289, 16521277, 16521265, 16521277,
#     16521169, 16521301, 16521241, 16521229, 16521229, 16521265, 16521265, 16521349, 16521253, 16521289,
#     16521301, 16521265, 16521241, 16521277, 16521265, 16521229, 16521241, 16521277, 16521253, 16521325,
#     16521277, 16521361, 16521361, 16521265, 16521313, 16521241, 16521289, 16521241, 16521301, 16521265,
#     16521253, 16521241, 16521265, 16521217, 16521301, 16521325, 16521301, 16521205, 16521217, 16521313,
#     16521289, 16521265, 16521277, 16521217, 16521265, 16521301, 16521277, 16521217, 16521277, 16521289,
#     16521289, 16521289, 16521277, 16521313, 16521253, 16521193, 16521241, 16521253, 16521301, 16521229,
#     16521229, 16521289, 16521301, 16521217, 16521265, 16521313, 16521265, 16521289, 16521253, 16521229,
#     16521277, 16521205, 16521265, 16521229, 16521313, 16521241, 16521265, 16521301, 16521277, 16521193,
#     16521337, 16521277, 16521217, 16521241, 16521205, 16521325, 16521217, 16521361, 16521301, 16521301
# ]
# # 60
# data =[
#     19236238, 19236166, 19236118, 19236178, 19236154, 19236154, 19236166, 19236226, 19236142, 19236202,
#     19236202, 19236082, 19236166, 19236202, 19236118, 19236118, 19236094, 19236142, 19236082, 19236202,
#     19236250, 19236214, 19236202, 19236178, 19236250, 19236202, 19236166, 19236142, 19236118, 19236142,
#     19236106, 19236154, 19236214, 19236154, 19236070, 19236142, 19236214, 19236154, 19236202, 19236202,
#     19236130, 19236286, 19236250, 19236226, 19236190, 19236214, 19236202, 19236130, 19236178, 19236166,
#     19236130, 19236166, 19236118, 19236070, 19236190, 19236238, 19236142, 19236178, 19236142, 19236142,
#     19236154, 19236058, 19236166, 19236250, 19236118, 19236082, 19236106, 19236130, 19236154, 19236118,
#     19236130, 19236178, 19236190, 19236154, 19236154, 19236166, 19236106, 19236106, 19236202, 19236190,
#     19236142, 19236190, 19236202, 19236190, 19236094, 19236154, 19236106, 19236094, 19236190, 19236166,
#     19236166, 19236190, 19236130, 19236226, 19236106, 19236226, 19236214, 19236142, 19236154, 19236106,
# ]
# # 70
# data =[
#     21949339, 21949243, 21949411, 21949375, 21949327, 21949279, 21949387, 21949423, 21949339, 21949339,
#     21949315, 21949243, 21949255, 21949363, 21949255, 21949279, 21949267, 21949363, 21949375, 21949243,
#     21949327, 21949375, 21949351, 21949303, 21949339, 21949339, 21949399, 21949387, 21949363, 21949291,
#     21949279, 21949291, 21949255, 21949375, 21949351, 21949339, 21949375, 21949363, 21949291, 21949351,
#     21949279, 21949315, 21949315, 21949279, 21949327, 21949327, 21949315, 21949279, 21949339, 21949339,
#     21949351, 21949339, 21949423, 21949339, 21949339, 21949303, 21949315, 21949315, 21949351, 21949255,
#     21949279, 21949279, 21949243, 21949291, 21949267, 21949399, 21949303, 21949339, 21949363, 21949303,
#     21949315, 21949387, 21949363, 21949315, 21949279, 21949399, 21949375, 21949327, 21949291, 21949303,
#     21949255, 21949339, 21949303, 21949303, 21949363, 21949279, 21949291, 21949291, 21949387, 21949207,
#     21949303, 21949387, 21949411, 21949315, 21949327, 21949279, 21949327, 21949303, 21949327, 21949303,
# ]
# # 80
# data =[
#     24664407, 24664383, 24664395, 24664443, 24664383, 24664359, 24664443, 24664359, 24664431, 24664455,
#     24664419, 24664371, 24664299, 24664443, 24664419, 24664371, 24664479, 24664431, 24664395, 24664323,
#     24664431, 24664323, 24664395, 24664515, 24664323, 24664419, 24664383, 24664419, 24664335, 24664503,
#     24664371, 24664407, 24664383, 24664311, 24664371, 24664419, 24664347, 24664335, 24664455, 24664359,
#     24664455, 24664455, 24664407, 24664407, 24664371, 24664383, 24664323, 24664299, 24664347, 24664347,
#     24664383, 24664347, 24664395, 24664443, 24664335, 24664359, 24664383, 24664335, 24664395, 24664455,
#     24664455, 24664287, 24664407, 24664395, 24664407, 24664455, 24664371, 24664443, 24664515, 24664443,
#     24664275, 24664407, 24664455, 24664479, 24664383, 24664407, 24664407, 24664395, 24664407, 24664287,
#     24664383, 24664323, 24664443, 24664443, 24664407, 24664407, 24664287, 24664455, 24664323, 24664359,
#     24664395, 24664443, 24664407, 24664323, 24664431, 24664383, 24664467, 24664419, 24664395, 24664443,
# ]
# # # 90
# data =[
#     27379391, 27379547, 27379487, 27379475, 27379427, 27379463, 27379427, 27379523, 27379511, 27379523,
#     27379511, 27379487, 27379487, 27379403, 27379499, 27379487, 27379379, 27379595, 27379559, 27379487,
#     27379475, 27379487, 27379475, 27379487, 27379511, 27379583, 27379559, 27379391, 27379379, 27379499,
#     27379571, 27379511, 27379403, 27379535, 27379535, 27379583, 27379403, 27379451, 27379487, 27379427,
#     27379547, 27379547, 27379487, 27379511, 27379499, 27379451, 27379547, 27379475, 27379583, 27379475,
#     27379487, 27379535, 27379403, 27379487, 27379559, 27379487, 27379439, 27379511, 27379535, 27379475,
#     27379475, 27379499, 27379415, 27379487, 27379511, 27379619, 27379415, 27379439, 27379463, 27379475,
#     27379499, 27379499, 27379355, 27379391, 27379439, 27379451, 27379451, 27379475, 27379523, 27379547,
#     27379499, 27379427, 27379607, 27379451, 27379463, 27379499, 27379559, 27379427, 27379511, 27379535,
#     27379535, 27379403, 27379535, 27379535, 27379463, 27379451, 27379451, 27379403, 27379523, 27379439,
# ]
# # 100
# data =[
#     30094519, 30094567, 30094543, 30094152, 30094579, 30094579, 30094471, 30094495, 30094603, 30094567,
#     30094519, 30094459, 30094567, 30094639, 30094531, 30094495, 30094699, 30094627, 30094543, 30094603,
#     30094555, 30094603, 30094507, 30094507, 30094495, 30094711, 30094543, 30094591, 30094555, 30094591,
#     30094579, 30094471, 30094735, 30094627, 30094519, 30094567, 30094639, 30094687, 30094543, 30094615,
#     30094579, 30094471, 30094579, 30094519, 30094579, 30094543, 30094507, 30094543, 30094495, 30094615,
#     30094555, 30094579, 30094519, 30094675, 30094471, 30094651, 30094435, 30094531, 30094639, 30094519,
#     30094591, 30094579, 30094579, 30094495, 30094591, 30094567, 30094603, 30094507, 30094459, 30094483,
#     30094507, 30094615, 30094519, 30094603, 30094531, 30094423, 30094567, 30094627, 30094459, 30094531,
#     30094543, 30094579, 30094555, 30094507, 30094639, 30094495, 30094591, 30094543, 30094651, 30094651,
#     30094639, 30094603, 30094699, 30094507, 30094579, 30094723, 30094603, 30094471, 30094519, 30094495,
# ]
# min_value = min(data)
# print("数组中的最小值是:", min_value)
# # 计算平均值和标准差
# mean_value = np.mean(data)
# std_deviation = np.std(data)
#
# # 创建柱状图
# plt.figure(figsize=(16, 8), dpi=600)
# plt.bar(range(len(data)), data, color='skyblue')
#
# # 调整Y轴刻度范围
# plt.ylim(5664900, max(data) + 100)
#
# # 添加平均线
# plt.axhline(mean_value, color='red', linestyle='--', label=f'平均值: {mean_value:.2f}')
#
# # 旋转x轴标签
# plt.xticks(range(len(data)), [str(i+1) for i in range(len(data))], rotation=90)
#
# # 增加数据标签
# for i, v in enumerate(data):
#     plt.text(i, v, str(v), ha='center', va='bottom', rotation=90, fontsize=8)
#
# # 标题包括标准差信息
# plt.title(f'10账户100次gas消耗柱状图(ms) (标准差: {std_deviation:.2f})', fontsize=16)
#
# # 添加标签
# plt.xlabel('数据点', fontsize=14)
# plt.ylabel('数值', fontsize=14)
#
# # 保存柱状图
# plt.rcParams['font.sans-serif'] = ['SimHei']
# plt.legend(loc='upper right')
# plt.tight_layout()
# plt.savefig('zhu_gas_10.png')
# # plt.show()


# # %折线

#
# data = [
#     [0.062530207, 0.160160133, 0.057861188, 0.240372427, 0.007783219, 0.37600197, 0.011494725, 0.073090216, 0.010705916],
#     [0.037834586, 0.191676334, 0.060975295, 0.279238095, 0.006261368, 0.33916792, 0.005287504, 0.074678124, 0.004880773],
#     [0.026863612, 0.206715903, 0.061820801, 0.295905531, 0.003575052, 0.318222213, 0.003690703, 0.079935479, 0.003270706],
#     [0.02094634, 0.213447248, 0.063197173, 0.303516827, 0.002511794, 0.307145675, 0.002955144, 0.08365283, 0.00262697],
#     [0.016260636, 0.210353483, 0.060700431, 0.295664573, 0.001878941, 0.320944867, 0.002528772, 0.089648249, 0.002020047],
#     [0.014032948, 0.216242587, 0.061205241, 0.293261356, 0.001543729, 0.323845635, 0.001929399, 0.086311536, 0.00162757],
#     [0.0118433, 0.218362217, 0.061078633, 0.29165767, 0.00145126, 0.32454196, 0.001627087, 0.088077714, 0.001360157],
#     [0.010716949, 0.222836359, 0.061937473, 0.287781746, 0.001207023, 0.322619867, 0.001440874, 0.090234204, 0.001225506],
#     [0.009613148, 0.219335866, 0.059947336, 0.299298401, 0.001292215, 0.318979942, 0.001223646, 0.08923637, 0.001073076],
#     [0.008561552, 0.218898766, 0.060527496, 0.297210531, 0.00103521, 0.322222171, 0.001159672, 0.089416562, 0.00096804]
# ]
# # 标签
# labels = ['time_deploy', 'time_bid', 'time_claimWinner', 'time_genProofs', 'time_revealBid',
#           'time_verifyWinnerBid', 'time_winnerPay', 'time_withdraw', 'time_destroy', 'time_totalTime']
# # 横坐标
# x_values = range(10, 101, 10)
# # 计算每一类的总和
# total_sums = [sum(data_point) for data_point in data]
#
# # 将数据转换为百分比
# data_percent = [[value / total for value, total in zip(data_point, total_sums)] for data_point in data]
#
# # 创建画布
# plt.figure(figsize=(15, 10), dpi=300)
#
# # 更多线型、颜色和标记样式
# line_styles = ['-', '--', ':', '-.', (0, (5, 1)), (0, (3, 5, 1, 5)), (0, (3, 5, 1, 5, 1, 5))]
# colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'tab:orange', 'tab:purple']
# markers = ['o', 's', '^', 'D', 'p', 'H', 'x', '+', 'v']
#
# # 设置线条的宽度
# line_width = 2.0
#
# # 绘制折线图
# for i in range(len(data[0])):
#     y_values = [data_percent[j][i] for j in range(len(data_percent))]
#     plt.plot(x_values, y_values, linestyle=line_styles[i % len(line_styles)],
#              color=colors[i % len(colors)], marker=markers[i % len(markers)],
#              label=labels[i], linewidth=line_width)
#
#
#
# # 添加标题和标签
# plt.title('不同账号数时间消耗百分比变化', fontsize=28)
# plt.xlabel('账号数量', fontsize=24)
# plt.ylabel('百分占比', fontsize=24)
# # 设置刻度的字体大小
# plt.xticks(x_values, fontsize=20)
# plt.yticks(fontsize=20)
# # 添加图例，设置为两列
# legend = plt.legend(loc='best', ncol=3)
# legend.get_frame().set_alpha(0.5)
# for text in legend.get_texts():
#     text.set_fontsize(20)  # 设置图例文本的字体大小
#
# # 添加网格线
# plt.grid(True, linestyle='--', alpha=0.7)
#
# # 自定义刻度标签为百分比
# def to_percent(y, _):
#     return f'{y*100:.1f}%'
#
# plt.gca().yaxis.set_major_formatter(FuncFormatter(to_percent))
# plt.rcParams['font.sans-serif'] = ['SimHei']
# # 保存图像文件
# plt.savefig('time_data_percent_plot.png')
#
# # 显示图
# plt.show()

# 新的数据

data = [
    [0.525289072, 0.37317131, 0.014739616, 0.009446127, 0, 0.00730906, 0.006784378, 0.057342243, 0.005918194],
    [0.355093389, 0.527812516, 0.009963923, 0.006385545, 0, 0.004940682, 0.004586214, 0.087217055, 0.004000676],
    [0.26820099, 0.606761018, 0.007525625, 0.004822984, 0, 0.003731845, 0.003463954, 0.102471887, 0.003021699],
    [0.21550811, 0.654771556, 0.006047116, 0.003875422, 0, 0.00299864, 0.002783398, 0.111746399, 0.002269359],
    [0.180119411, 0.687011474, 0.005054065, 0.003239037, 0, 0.002506202, 0.002198621, 0.117974482, 0.001896707],
    [0.15469827, 0.71008575, 0.00434081, 0.002771967, 0, 0.002152508, 0.001888318, 0.122433362, 0.001629015],
    [0.135575979, 0.727509657, 0.00380423, 0.002341895, 0, 0.001886453, 0.001654903, 0.125799231, 0.001427652],
    [0.120651695, 0.741042181, 0.003385444, 0.002084097, 0, 0.001678771, 0.00147273, 0.128414586, 0.001270495],
    [0.108687248, 0.751890963, 0.003049726, 0.001877427, 0, 0.0015123, 0.001326687, 0.130511142, 0.001144507],
    [0.098883373, 0.760795105, 0.002774628, 0.001690998, 0, 0.001375883, 0.001207016, 0.132231728, 0.001041269]
]

# 新的标签
labels = ['gas_deploy', 'gas_bid', 'gas_claimWinner', 'gas_genProofs', 'gas_revealBid',
          'gas_verifyWinnerBid', 'gas_winnerPay', 'gas_withdraw', 'gas_Destroy']

# 横坐标
x_values = range(10, 101, 10)

plt.figure(figsize=(6, 4), dpi=200)

line_styles = ['-', '--', ':', '-.', (0, (5, 1)), (0, (3, 5, 1, 5)), (0, (3, 5, 1, 5, 1, 5))]
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'tab:orange', 'tab:purple']
markers = ['o', 's', '^', 'D', 'p', 'H', 'x', '+', 'v']

line_width = 2.0

for i in range(len(data[0])):
    y_values = [data[j][i] for j in range(len(data))]
    plt.plot(x_values, y_values, linestyle=line_styles[i % len(line_styles)],
             color=colors[i % len(colors)], marker=markers[i % len(markers)],
             label=labels[i], linewidth=line_width)

plt.title('不同账号数gas消耗百分比变化', fontsize=14)
plt.xlabel('账号数量', fontsize=12)
plt.ylabel('百分比值', fontsize=12)
plt.xticks(x_values, fontsize=10)
plt.yticks(fontsize=10)

# 更新图例以显示为两列
legend = plt.legend(loc='best', ncol=3)
legend.get_frame().set_alpha(0.5)
for text in legend.get_texts():
    text.set_fontsize(5)

plt.grid(True, linestyle='--', alpha=0.7)

def to_percent(y, _):
    return f'{y*100:.1f}%'

plt.gca().yaxis.set_major_formatter(FuncFormatter(to_percent))
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.savefig('gas_data_percent_plot.png')
plt.show()